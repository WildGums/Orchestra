[assembly: System.Resources.NeutralResourcesLanguage("en-US")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v6.0", FrameworkDisplayName=".NET 6.0")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.wildgums.com/orchestra", "Orchestra.Controls")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.wildgums.com/orchestra", "Orchestra.Views")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.wildgums.com/orchestra", "Orchestra.Windows")]
[assembly: System.Windows.Markup.XmlnsPrefix("http://schemas.wildgums.com/orchestra", "orchestra")]
[assembly: System.Windows.ThemeInfo(System.Windows.ResourceDictionaryLocation.None, System.Windows.ResourceDictionaryLocation.SourceAssembly)]
public static class LoadAssembliesOnStartup { }
public static class ModuleInitializer
{
    public static void Initialize() { }
}
namespace Orchestra.Automation
{
    public static class BackstageExtensions
    {
        public static TView? GetContent<TView>(this Orchestra.Automation.FluentRibbon.Backstage backstage)
            where TView : Orc.Automation.AutomationControl { }
    }
    public static class BackstageTabControlExtensions
    {
        public static TView? GetItemContent<TView>(this Orchestra.Automation.FluentRibbon.BackstageTabControl tabControl, string header)
            where TView : Orc.Automation.AutomationControl { }
        public static void SelectItem(this Orchestra.Automation.FluentRibbon.BackstageTabControl tabControl, string header) { }
    }
    public static class BackstageTabItemExtensions
    {
        public static TView? GetContent<TView>(this Orchestra.Automation.FluentRibbon.BackstageTabItem backstage)
            where TView : Orc.Automation.AutomationControl { }
    }
    public static class RibbonExtensions
    {
        public static TView? GetView<TView>(this Orchestra.Automation.FluentRibbon.Ribbon ribbon, string tabName, string viewName)
            where TView : Orc.Automation.AutomationControl { }
        public static System.IDisposable OpenBackstageView<TBackstageContentView>(this Orchestra.Automation.FluentRibbon.Ribbon ribbon, out TBackstageContentView? view)
            where TBackstageContentView : Orc.Automation.AutomationControl { }
        public static System.IDisposable OpenTabItemBackstageView<TBackstageTabItemContentView>(this Orchestra.Automation.FluentRibbon.Ribbon ribbon, string header, out TBackstageTabItemContentView? view)
            where TBackstageTabItemContentView : Orc.Automation.AutomationControl { }
    }
}
namespace Orchestra.Automation.FluentRibbon
{
    [Orc.Automation.Control(ClassName="Backstage", ControlTypeName="Menu")]
    public class Backstage : Orc.Automation.Controls.FrameworkElement
    {
        public Backstage(System.Windows.Automation.AutomationElement element) { }
        public System.Windows.Automation.AutomationElement? Content { get; }
        public bool IsOpen { get; set; }
    }
    [Orc.Automation.Control(ControlTypeName="Tab")]
    public class BackstageTabControl : Orc.Automation.Controls.FrameworkElement<Orchestra.Automation.FluentRibbon.BackstageTabControlModel>
    {
        public BackstageTabControl(System.Windows.Automation.AutomationElement element) { }
        public TControl? GetItem<TControl>(string name)
            where TControl : Orc.Automation.AutomationControl { }
    }
    [Orc.Automation.ActiveAutomationModel]
    public class BackstageTabControlModel : Orc.Automation.SelectorModel
    {
        public static readonly Catel.Data.IPropertyData? ContentStringFormatProperty;
        public static readonly Catel.Data.IPropertyData? IsBackButtonVisibleProperty;
        public static readonly Catel.Data.IPropertyData? IsWindowSteeringHelperEnabledProperty;
        public static readonly Catel.Data.IPropertyData? ItemsPanelBackgroundProperty;
        public static readonly Catel.Data.IPropertyData? ItemsPanelMinWidthProperty;
        public static readonly Catel.Data.IPropertyData? SelectedContentMarginProperty;
        public static readonly Catel.Data.IPropertyData? SelectedContentProperty;
        public static readonly Catel.Data.IPropertyData? SelectedContentStringFormatProperty;
        public BackstageTabControlModel(Orc.Automation.AutomationElementAccessor accessor) { }
        public string? ContentStringFormat { get; set; }
        public bool IsBackButtonVisible { get; set; }
        public bool IsWindowSteeringHelperEnabled { get; set; }
        public System.Windows.Media.SolidColorBrush? ItemsPanelBackground { get; set; }
        public double ItemsPanelMinWidth { get; set; }
        public object? SelectedContent { get; set; }
        public System.Windows.Thickness? SelectedContentMargin { get; set; }
        public string? SelectedContentStringFormat { get; set; }
    }
    [Orc.Automation.Control(ClassName="BackstageTabItem")]
    public class BackstageTabItem : Orc.Automation.Controls.FrameworkElement<Orchestra.Automation.FluentRibbon.BackstageTabItemModel>
    {
        public BackstageTabItem(System.Windows.Automation.AutomationElement element) { }
        public System.Windows.Automation.AutomationElement? Content { get; }
        public string Header { get; }
        public bool IsSelected { get; set; }
        public bool TrySelect() { }
    }
    [Orc.Automation.ActiveAutomationModel]
    public class BackstageTabItemModel : Orc.Automation.HeaderedContentControlModel
    {
        public BackstageTabItemModel(Orc.Automation.AutomationElementAccessor accessor) { }
    }
    [Orc.Automation.Control(ClassName="DropDownButton")]
    public class DropDownButton : Orc.Automation.Controls.FrameworkElement<Orchestra.Automation.FluentRibbon.DropDownButtonModel>
    {
        public DropDownButton(System.Windows.Automation.AutomationElement element) { }
        public bool IsExpanded { get; set; }
        public void Invoke() { }
    }
    [Orc.Automation.ActiveAutomationModel]
    public class DropDownButtonModel : Orc.Automation.ItemsControlModel
    {
        public static readonly Catel.Data.IPropertyData? ClosePopupOnMouseDownDelayProperty;
        public static readonly Catel.Data.IPropertyData? ClosePopupOnMouseDownProperty;
        public static readonly Catel.Data.IPropertyData? DropDownHeightProperty;
        public static readonly Catel.Data.IPropertyData? HasTriangleProperty;
        public static readonly Catel.Data.IPropertyData? HeaderProperty;
        public static readonly Catel.Data.IPropertyData? IconProperty;
        public static readonly Catel.Data.IPropertyData? IsContextMenuOpenedProperty;
        public static readonly Catel.Data.IPropertyData? IsDropDownOpenProperty;
        public static readonly Catel.Data.IPropertyData? IsSimplifiedProperty;
        public static readonly Catel.Data.IPropertyData? KeyTipProperty;
        public static readonly Catel.Data.IPropertyData? LargeIconProperty;
        public static readonly Catel.Data.IPropertyData? MaxDropDownHeightProperty;
        public static readonly Catel.Data.IPropertyData? MediumIconProperty;
        public static readonly Catel.Data.IPropertyData? ResizeModeProperty;
        public static readonly Catel.Data.IPropertyData? SimplifiedSizeDefinitionProperty;
        public static readonly Catel.Data.IPropertyData? SizeProperty;
        public DropDownButtonModel(Orc.Automation.AutomationElementAccessor accessor) { }
        public bool ClosePopupOnMouseDown { get; set; }
        public int ClosePopupOnMouseDownDelay { get; set; }
        public double DropDownHeight { get; set; }
        public bool HasTriangle { get; set; }
        public object? Header { get; set; }
        public object? Icon { get; set; }
        public bool IsContextMenuOpened { get; set; }
        public bool IsDropDownOpen { get; set; }
        public bool IsSimplified { get; set; }
        public string? KeyTip { get; set; }
        public object? LargeIcon { get; set; }
        public double MaxDropDownHeight { get; set; }
        public object? MediumIcon { get; set; }
        public Fluent.ContextMenuResizeMode ResizeMode { get; set; }
        public Fluent.RibbonControlSizeDefinition? SimplifiedSizeDefinition { get; set; }
        public Fluent.RibbonControlSize Size { get; set; }
    }
    [Orc.Automation.Control(ClassName="Ribbon")]
    public class Ribbon : Orc.Automation.Controls.FrameworkElement
    {
        public Ribbon(System.Windows.Automation.AutomationElement element) { }
        public void CloseBackstage() { }
        public Orchestra.Automation.FluentRibbon.RibbonGroupBox? GetGroupBox(string tabName, string viewName) { }
        public Orchestra.Automation.FluentRibbon.Backstage? OpenBackstage() { }
    }
    [Orc.Automation.Control(ClassName="RibbonButton")]
    public class RibbonButton : Orc.Automation.Controls.FrameworkElement<Orc.Automation.ButtonModel>
    {
        public RibbonButton(System.Windows.Automation.AutomationElement element) { }
        public string? Content { get; }
        public bool Click() { }
    }
    [Orc.Automation.Control(ClassName="RibbonGroupBox")]
    public class RibbonGroupBox : Orc.Automation.Controls.FrameworkElement<Orchestra.Automation.FluentRibbon.RibbonGroupBoxModel>
    {
        public RibbonGroupBox(System.Windows.Automation.AutomationElement element) { }
        public bool IsExpanded { get; set; }
        public string Name { get; }
        public TView? GetContent<TView>()
            where TView : Orc.Automation.AutomationControl { }
    }
    [Orc.Automation.ActiveAutomationModel]
    public class RibbonGroupBoxModel : Orc.Automation.ControlModel
    {
        public static readonly Catel.Data.IPropertyData? CanAddToQuickAccessToolBarProperty;
        public static readonly Catel.Data.IPropertyData? IconProperty;
        public static readonly Catel.Data.IPropertyData? IsDropDownOpenProperty;
        public static readonly Catel.Data.IPropertyData? IsLauncherEnabledProperty;
        public static readonly Catel.Data.IPropertyData? IsSeparatorVisibleProperty;
        public static readonly Catel.Data.IPropertyData? IsSimplifiedProperty;
        public static readonly Catel.Data.IPropertyData? IsSnappedProperty;
        public static readonly Catel.Data.IPropertyData? LauncherCommandParameterProperty;
        public static readonly Catel.Data.IPropertyData? LauncherToolTipProperty;
        public static readonly Catel.Data.IPropertyData? MediumIconProperty;
        public RibbonGroupBoxModel(Orc.Automation.AutomationElementAccessor accessor) { }
        public bool CanAddToQuickAccessToolBar { get; set; }
        public object? Icon { get; set; }
        public bool IsDropDownOpen { get; set; }
        public bool IsLauncherEnabled { get; set; }
        public bool IsSeparatorVisible { get; set; }
        public bool IsSimplified { get; }
        public bool IsSnapped { get; set; }
        public System.Windows.Input.ICommand? LauncherCommand { get; set; }
        public object? LauncherCommandParameter { get; set; }
        public object? LauncherToolTip { get; set; }
        public object? MediumIcon { get; set; }
    }
    public class RibbonMap : Orc.Automation.AutomationBase
    {
        public RibbonMap(System.Windows.Automation.AutomationElement element) { }
        public Orchestra.Automation.FluentRibbon.Backstage? Backstage { get; }
        public System.Collections.Generic.List<Orc.Automation.Controls.TabItem> TabItems { get; }
    }
    [Orc.Automation.Control(ClassName="SplitButton")]
    public class SplitButton : Orc.Automation.Controls.FrameworkElement<Orchestra.Automation.FluentRibbon.SplitButtonModel>
    {
        public SplitButton(System.Windows.Automation.AutomationElement element) { }
        public bool IsExpanded { get; set; }
        public void Invoke() { }
    }
    public class SplitButtonModel : Orchestra.Automation.FluentRibbon.DropDownButtonModel
    {
        public SplitButtonModel(Orc.Automation.AutomationElementAccessor accessor) { }
    }
}
namespace Orchestra.Controls
{
    public class RibbonBackstageButton : System.Windows.Controls.Button
    {
        public static readonly System.Windows.DependencyProperty IsDefinitiveProperty;
        public static readonly System.Windows.DependencyProperty ShowBorderProperty;
        public RibbonBackstageButton() { }
        public bool IsDefinitive { get; set; }
        public bool ShowBorder { get; set; }
        protected override void OnClick() { }
    }
    public class RibbonBackstageTabControl : System.Windows.Controls.TabControl
    {
        public RibbonBackstageTabControl() { }
    }
    public class RibbonBackstageTabItem : System.Windows.Controls.TabItem
    {
        public static readonly System.Windows.DependencyProperty HeaderTextProperty;
        public static readonly System.Windows.DependencyProperty IconProperty;
        public RibbonBackstageTabItem() { }
        public string? HeaderText { get; set; }
        public System.Windows.Media.ImageSource? Icon { get; set; }
    }
    public class RibbonBackstageTabItemHeader : System.Windows.Controls.ContentControl
    {
        public static readonly System.Windows.DependencyProperty HeaderTextProperty;
        public static readonly System.Windows.DependencyProperty HeaderTextStyleKeyProperty;
        public static readonly System.Windows.DependencyProperty IconProperty;
        public static readonly System.Windows.DependencyProperty KeepIconSizeWithoutIconProperty;
        public RibbonBackstageTabItemHeader() { }
        public string? HeaderText { get; set; }
        public string? HeaderTextStyleKey { get; set; }
        public System.Windows.Media.ImageSource? Icon { get; set; }
        public bool KeepIconSizeWithoutIcon { get; set; }
    }
}
namespace Orchestra
{
    public static class RibbonExtensions
    {
        public static void AddAboutButton(this Fluent.Ribbon ribbon) { }
        public static Fluent.Button AddRibbonButton(this Fluent.Ribbon ribbon, System.Uri imageUri, System.Action action) { }
        public static Fluent.Button AddRibbonButton(this Fluent.Ribbon ribbon, System.Windows.Media.ImageSource? imageSource, System.Action action) { }
    }
}
namespace Orchestra.Services
{
    public class ApplicationInitializationServiceBase : Orchestra.Services.IApplicationInitializationService
    {
        public ApplicationInitializationServiceBase() { }
        public virtual bool ShowChangelog { get; }
        public virtual bool ShowShell { get; }
        public virtual bool ShowSplashScreen { get; }
        protected virtual System.Globalization.CultureInfo GetApplicationCulture() { }
        protected virtual System.Windows.Markup.XmlLanguage GetApplicationLanguage() { }
        public virtual System.Threading.Tasks.Task InitializeAfterCreatingShellAsync() { }
        public virtual System.Threading.Tasks.Task InitializeAfterShowingShellAsync() { }
        protected virtual void InitializeApplicationLanguage(System.Windows.Markup.XmlLanguage xmlLanguage) { }
        public virtual System.Threading.Tasks.Task InitializeBeforeCreatingShellAsync() { }
        public virtual System.Threading.Tasks.Task InitializeBeforeShowingShellAsync() { }
        public virtual System.Threading.Tasks.Task InitializeBeforeShowingSplashScreenAsync() { }
        protected virtual void InitializeLogging() { }
        protected virtual System.Threading.Tasks.Task ShowChangelogAsync() { }
        protected static System.Threading.Tasks.Task RunAndWaitAsync(params System.Func<System.Threading.Tasks.Task>[] actions) { }
    }
    public interface IApplicationInitializationService
    {
        bool ShowShell { get; }
        bool ShowSplashScreen { get; }
        System.Threading.Tasks.Task InitializeAfterCreatingShellAsync();
        System.Threading.Tasks.Task InitializeAfterShowingShellAsync();
        System.Threading.Tasks.Task InitializeBeforeCreatingShellAsync();
        System.Threading.Tasks.Task InitializeBeforeShowingShellAsync();
        System.Threading.Tasks.Task InitializeBeforeShowingSplashScreenAsync();
    }
    public interface IRibbonService : Orchestra.Services.IShellContentService
    {
        System.Windows.FrameworkElement? GetRibbon();
    }
    public interface IShellConfigurationService
    {
        bool DeferValidationUntilFirstSaveCall { get; set; }
    }
    public interface IShellContentService
    {
        System.Windows.FrameworkElement? GetMainView();
        System.Windows.FrameworkElement? GetStatusBar();
    }
    public interface IShellService
    {
        Orchestra.Views.IShell? Shell { get; }
        System.Threading.Tasks.Task<TShell> CreateAsync<TShell>()
            where TShell :  class, Orchestra.Views.IShell;
    }
    public class ShellConfigurationService : Orchestra.Services.IShellConfigurationService
    {
        public ShellConfigurationService() { }
        public virtual bool DeferValidationUntilFirstSaveCall { get; set; }
    }
    public class ShellService : Orchestra.Services.IShellService
    {
        public ShellService(Catel.IoC.ITypeFactory typeFactory, Orchestra.Services.IKeyboardMappingsService keyboardMappingsService, Catel.MVVM.ICommandManager commandManager, Orchestra.Services.ISplashScreenService splashScreenService, Orchestra.Services.IEnsureStartupService ensureStartupService, Orchestra.Services.IApplicationInitializationService applicationInitializationService, Catel.IoC.IDependencyResolver dependencyResolver, Catel.IoC.IServiceLocator serviceLocator, Orchestra.Services.IConfigurationBackupService configurationBackupService) { }
        public Orchestra.Views.IShell? Shell { get; }
        public System.Threading.Tasks.Task<TShell> CreateAsync<TShell>()
            where TShell :  class, Orchestra.Views.IShell { }
    }
    public class XamlResourceService : Orchestra.Services.IXamlResourceService
    {
        public XamlResourceService() { }
        public virtual System.Collections.Generic.IEnumerable<System.Windows.ResourceDictionary> GetApplicationResourceDictionaries() { }
        protected virtual System.Windows.ResourceDictionary GetResourceDictionaryFromAssembly(System.Reflection.Assembly assembly) { }
        protected virtual System.Uri GetResourceDictionaryUriFromAssembly(System.Reflection.Assembly assembly) { }
    }
}
namespace Orchestra.ViewModels
{
    public class ShellViewModel : Catel.MVVM.ViewModelBase
    {
        public ShellViewModel(Orchestra.Services.IShellConfigurationService shellConfigurationService) { }
    }
}
namespace Orchestra.Views
{
    public interface IShell
    {
        void Show();
    }
    public class ShellWindow : Orchestra.Windows.RibbonWindow, Orchestra.Views.IShell, System.Windows.Markup.IComponentConnector
    {
        public ShellWindow() { }
        public void InitializeComponent() { }
    }
}
namespace Orchestra.Windows
{
    public class RibbonWindow : Fluent.RibbonWindow, Catel.MVVM.IViewModelContainer, Catel.MVVM.Views.IDataWindow, Catel.MVVM.Views.IView, System.ComponentModel.INotifyPropertyChanged
    {
        public RibbonWindow() { }
        public RibbonWindow(Catel.MVVM.IViewModel? viewModel) { }
        public Catel.MVVM.IViewModel? ViewModel { get; }
        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;
        public event System.EventHandler<System.EventArgs>? ViewModelChanged;
    }
}